// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.1
// source: protos/proto/book-inventory-service.proto

package book_inventory_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	BookInventoryService_CheckBookAvailability_FullMethodName = "/BookInventoryService/CheckBookAvailability"
	BookInventoryService_AddBook_FullMethodName               = "/BookInventoryService/AddBook"
	BookInventoryService_GetActionId_FullMethodName           = "/BookInventoryService/GetActionId"
	BookInventoryService_UpdateStock_FullMethodName           = "/BookInventoryService/UpdateStock"
)

// BookInventoryServiceClient is the client API for BookInventoryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// request (rpc methods)
type BookInventoryServiceClient interface {
	CheckBookAvailability(ctx context.Context, in *BookAvailabilityRequest, opts ...grpc.CallOption) (*BookAvailabilityResponse, error)
	AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*AddBookResponse, error)
	GetActionId(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error)
	UpdateStock(ctx context.Context, in *AddBookResponse, opts ...grpc.CallOption) (*AddBookResponse, error)
}

type bookInventoryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBookInventoryServiceClient(cc grpc.ClientConnInterface) BookInventoryServiceClient {
	return &bookInventoryServiceClient{cc}
}

func (c *bookInventoryServiceClient) CheckBookAvailability(ctx context.Context, in *BookAvailabilityRequest, opts ...grpc.CallOption) (*BookAvailabilityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookAvailabilityResponse)
	err := c.cc.Invoke(ctx, BookInventoryService_CheckBookAvailability_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookInventoryServiceClient) AddBook(ctx context.Context, in *AddBookRequest, opts ...grpc.CallOption) (*AddBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBookResponse)
	err := c.cc.Invoke(ctx, BookInventoryService_AddBook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookInventoryServiceClient) GetActionId(ctx context.Context, in *GetActionRequest, opts ...grpc.CallOption) (*GetActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetActionResponse)
	err := c.cc.Invoke(ctx, BookInventoryService_GetActionId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bookInventoryServiceClient) UpdateStock(ctx context.Context, in *AddBookResponse, opts ...grpc.CallOption) (*AddBookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddBookResponse)
	err := c.cc.Invoke(ctx, BookInventoryService_UpdateStock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BookInventoryServiceServer is the server API for BookInventoryService service.
// All implementations must embed UnimplementedBookInventoryServiceServer
// for forward compatibility.
//
// request (rpc methods)
type BookInventoryServiceServer interface {
	CheckBookAvailability(context.Context, *BookAvailabilityRequest) (*BookAvailabilityResponse, error)
	AddBook(context.Context, *AddBookRequest) (*AddBookResponse, error)
	GetActionId(context.Context, *GetActionRequest) (*GetActionResponse, error)
	UpdateStock(context.Context, *AddBookResponse) (*AddBookResponse, error)
	mustEmbedUnimplementedBookInventoryServiceServer()
}

// UnimplementedBookInventoryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBookInventoryServiceServer struct{}

func (UnimplementedBookInventoryServiceServer) CheckBookAvailability(context.Context, *BookAvailabilityRequest) (*BookAvailabilityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckBookAvailability not implemented")
}
func (UnimplementedBookInventoryServiceServer) AddBook(context.Context, *AddBookRequest) (*AddBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBook not implemented")
}
func (UnimplementedBookInventoryServiceServer) GetActionId(context.Context, *GetActionRequest) (*GetActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionId not implemented")
}
func (UnimplementedBookInventoryServiceServer) UpdateStock(context.Context, *AddBookResponse) (*AddBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStock not implemented")
}
func (UnimplementedBookInventoryServiceServer) mustEmbedUnimplementedBookInventoryServiceServer() {}
func (UnimplementedBookInventoryServiceServer) testEmbeddedByValue()                              {}

// UnsafeBookInventoryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BookInventoryServiceServer will
// result in compilation errors.
type UnsafeBookInventoryServiceServer interface {
	mustEmbedUnimplementedBookInventoryServiceServer()
}

func RegisterBookInventoryServiceServer(s grpc.ServiceRegistrar, srv BookInventoryServiceServer) {
	// If the following call pancis, it indicates UnimplementedBookInventoryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BookInventoryService_ServiceDesc, srv)
}

func _BookInventoryService_CheckBookAvailability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookAvailabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInventoryServiceServer).CheckBookAvailability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookInventoryService_CheckBookAvailability_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInventoryServiceServer).CheckBookAvailability(ctx, req.(*BookAvailabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookInventoryService_AddBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInventoryServiceServer).AddBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookInventoryService_AddBook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInventoryServiceServer).AddBook(ctx, req.(*AddBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookInventoryService_GetActionId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInventoryServiceServer).GetActionId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookInventoryService_GetActionId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInventoryServiceServer).GetActionId(ctx, req.(*GetActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BookInventoryService_UpdateStock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBookResponse)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BookInventoryServiceServer).UpdateStock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BookInventoryService_UpdateStock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BookInventoryServiceServer).UpdateStock(ctx, req.(*AddBookResponse))
	}
	return interceptor(ctx, in, info, handler)
}

// BookInventoryService_ServiceDesc is the grpc.ServiceDesc for BookInventoryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BookInventoryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "BookInventoryService",
	HandlerType: (*BookInventoryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckBookAvailability",
			Handler:    _BookInventoryService_CheckBookAvailability_Handler,
		},
		{
			MethodName: "AddBook",
			Handler:    _BookInventoryService_AddBook_Handler,
		},
		{
			MethodName: "GetActionId",
			Handler:    _BookInventoryService_GetActionId_Handler,
		},
		{
			MethodName: "UpdateStock",
			Handler:    _BookInventoryService_UpdateStock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/proto/book-inventory-service.proto",
}
